/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package CapaPresentacion;

import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author Mingjian
 */
public class VistaColeccionLibros extends javax.swing.JPanel
{

    private ControladorPresentacion controlPre;
    private VistaLibro vistaVL;
    JFileChooser chooser;
    File file;

    /**
     * Creates new form VistaColeccionLibros
     */
    public VistaColeccionLibros()
    {
        initComponents();
        this.vistaVL = new VistaLibro();
        this.chooser = new JFileChooser();
    }

    public void setControllers(ControladorPresentacion controlPre)
    {
        this.controlPre = controlPre;
    }

    public void updateBooks()
    {
        ArrayList<String[]> list = controlPre.getAllLibros();
        String[] libro = new String[list.size()];
        int i = 0;
        for(String[] s : list)
        {
            libro[i] = s[0];
            ++i;
        }
        listLibros.setListData(libro);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLibros = new javax.swing.JList();

        buttonAccept = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonCreate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonModify = new javax.swing.JButton();
        buttonFileChooser = new javax.swing.JButton();

        jLabel1.setText("Listas de libros:");

        listLibros.addAncestorListener(new javax.swing.event.AncestorListener()
        {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt)
            {}
            public void ancestorAdded(javax.swing.event.AncestorEvent evt)
            {
                listLibrosAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt)
            {}

        });

        jScrollPane1.setViewportView(listLibros);

        buttonAccept.setText("Aceptar");
        buttonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAcceptActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancelar");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonCreate.setText("Crear");
        buttonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateActionPerformed(evt);
            }
        });

        buttonDelete.setText("Eliminar");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    buttonDeleteActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        buttonModify.setText("Modificar");
        buttonModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    buttonModifyActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        buttonFileChooser.setText("Importar");
        buttonFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    buttonFileChooserActionPerformed(evt);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonAccept)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(24, 24, 24))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(27, 27, 27)
                                                                .addComponent(buttonCancel)
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonFileChooser)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(buttonCreate)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(buttonDelete)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(buttonModify)
                                                .addContainerGap(60, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonCreate)
                                        .addComponent(buttonFileChooser)
                                        .addComponent(buttonDelete)
                                        .addComponent(buttonModify))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonAccept)
                                        .addComponent(buttonCancel))
                                .addGap(28, 28, 28))
        );
    }// </editor-fold>                        

    private void listLibrosAncestorAdded (javax.swing.event.AncestorEvent evt)
    {
        this.updateBooks();
    }

    private void buttonAcceptActionPerformed (java.awt.event.ActionEvent evt)
    {
        if(! controlPre.esEmptyBiblio())
        {
            buttonAccept.setEnabled(true);
            //controlPre.activeView("ThemesCollection");
        }
        else
            buttonAccept.setEnabled(false);
    }

    private void buttonCancelActionPerformed (java.awt.event.ActionEvent evt)
    {
        //controlPre.activeView("CreateLibrary");
    }

    private void buttonCreateActionPerformed(java.awt.event.ActionEvent evt)
    {
        /*controlPre.activeView("BookView");*/
        vistaVL.setMode(true);

    }

    private void buttonModifyActionPerformed(java.awt.event.ActionEvent evt)  throws IOException
    {
        if(! controlPre.esEmptyBiblio())
        {
            //controlPre.activeView("BookView");
            vistaVL.setMode(false);
            String idLibro = listLibros.getSelectedValue().toString();
            vistaVL.loadLibro(idLibro);
        }
        else
            buttonModify.setEnabled(false);
    }

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) throws IOException
    {
        if(! controlPre.esEmptyBiblio()) {
            String idLibro = listLibros.getSelectedValue().toString();
            controlPre.eliminarLibro(idLibro);
            this.updateBooks();
        }
        else
            buttonDelete.setEnabled(false);
    }

    private void buttonFileChooserActionPerformed(java.awt.event.ActionEvent evt) throws FileNotFoundException {
        FileReader filer = null;
        String path;
        ArrayList<String> listaLibros = new ArrayList<String>();
        String espacios = " ";
        String titulo = null;
        String pedazos[] = new String[3];
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de texto", "txt");
        chooser.setFileFilter(filtro);
        chooser.setDialogTitle("Importar un fichero");
        chooser.setApproveButtonText("Importar");

        int status = chooser.showOpenDialog(this);
        if(status == JFileChooser.APPROVE_OPTION)
        {
            file = chooser.getSelectedFile();
            path = file.getAbsolutePath();
            String aux = path;

            filer = new FileReader(new File(aux));

            try {
                BufferedReader reader = new BufferedReader(filer);  //abrimos el archivo
                String linea = reader.readLine(); //leemos la primera linea

                if (linea == null)
                {
                    JOptionPane.showMessageDialog(this, "El archivo está vacio", "Archivo vacío", JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    do
                    {
                        pedazos = linea.split(espacios, 3); //dividimos la linea leida en tres partes

                        titulo = pedazos[0];
                        listaLibros.add(titulo);

                        controlPre.anadirLibro(pedazos[0], pedazos[1], Integer.parseInt(pedazos[2]));

                        linea = reader.readLine(); //leemos la siguiente línea
                    }
                    while (linea != null);
                }
                reader.close(); //cerramos el fichero
            } catch (IOException ex) {
                Logger.getLogger(VistaColeccionLibros.class.getName()).log(Level.SEVERE, null, ex);
            }
            String array[] = listaLibros.toArray(new String[listaLibros.size()]);
            listLibros.setListData(array);
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList listLibros;
    private javax.swing.JButton buttonAccept;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCreate;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonModify;
    private javax.swing.JButton buttonFileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}
